{"version":3,"sources":["../../src/index.ts","../../src/_helpers/zeroPad.ts","../../src/logger.ts"],"sourcesContent":["export {createLogger} from './logger';\r\n","export const zeroPad = (x: number, len = 2): string => {\r\n    return String(x).padStart(len, '0');\r\n}\r\n","import {zeroPad} from './_helpers/zeroPad';\r\n\r\nexport interface ILogItem {\r\n    timestamp: number;\r\n    message: string;\r\n}\r\n\r\ninterface IMessage<Payload = unknown> {\r\n    payloadType: number;\r\n    payload: Payload;\r\n    clientMsgId: string;\r\n}\r\n\r\nexport interface ILogger {\r\n    enable: () => void;\r\n    disable: () => void;\r\n    getLogs: () => ILogItem[];\r\n    info: (text: string, cause?: unknown) => void;\r\n    error: (text: string, cause?: unknown) => void;\r\n    warn: (text: string, cause?: unknown) => void;\r\n    request: (item: IMessage) => void;\r\n    response: (item: IMessage) => void;\r\n    event: (item: IMessage) => void;\r\n}\r\n\r\nconst defaultExpirationTime = 10 * 60 * 1000; // 10 minutes\r\n\r\nexport const createLogger = (isEnabled: boolean): ILogger => {\r\n    let enabled = isEnabled;\r\n\r\n    const originalConsoleInfo = console.info;\r\n    const originalConsoleLog = console.log;\r\n    const originalConsoleError = console.error;\r\n    const originalConsoleWarn = console.warn;\r\n\r\n    let logs: ILogItem[] = [];\r\n\r\n    const pushLog = (log: ILogItem) => {\r\n        logs.push(log);\r\n\r\n        logs = logs.filter(item => item.timestamp >= new Date().getTime() - defaultExpirationTime);\r\n    };\r\n\r\n    console.log = (text: string, ...causes: unknown[]) => {\r\n        const {timestamp, format} = getDate();\r\n\r\n        const msg = `[${format}] LOG: ${text}`;\r\n        const formatParams = causes\r\n            ? `, cause: ${causes.join(' ')}`\r\n            : '';\r\n\r\n        pushLog({timestamp, message: msg + formatParams});\r\n\r\n        originalConsoleLog.call(console, text, ...causes);\r\n    };\r\n\r\n    console.error = (text: string, ...causes: unknown[]) => {\r\n        const {timestamp, format} = getDate();\r\n\r\n        const msg = `[${format}] ERROR: ${text}`;\r\n        const formatParams = causes\r\n            ? `, cause: ${causes.join(' ')}`\r\n            : '';\r\n\r\n        pushLog({timestamp, message: msg + formatParams});\r\n\r\n        originalConsoleError.call(console, text, ...causes);\r\n    };\r\n\r\n    console.warn = (text: string, ...causes: unknown[]) => {\r\n        const {timestamp, format} = getDate();\r\n\r\n        const msg = `[${format}] WARN: ${text}`;\r\n        const formatParams = causes\r\n            ? `, cause: ${causes.join(' ')}`\r\n            : '';\r\n\r\n        pushLog({timestamp, message: msg + formatParams});\r\n\r\n        originalConsoleWarn.call(console, text, ...causes);\r\n    };\r\n\r\n    const enable = () => {\r\n        enabled = true;\r\n    };\r\n\r\n    const disable = () => {\r\n        enabled = false;\r\n    };\r\n\r\n    const getLogs = () => {\r\n        return logs;\r\n    };\r\n\r\n    const getDate = () => {\r\n        const date = new Date();\r\n\r\n        return {\r\n            timestamp: date.getTime(),\r\n            format: `${zeroPad(date.getDate())}.${zeroPad(date.getMonth() + 1)}.${date.getFullYear()} ${zeroPad(date.getHours())}:${zeroPad(date.getMinutes())}:${zeroPad(date.getSeconds())}`,\r\n        };\r\n    };\r\n\r\n    const info = (text: string, cause?: unknown) => {\r\n        const {timestamp, format} = getDate();\r\n\r\n        const msg = `[${format}] ${text}`;\r\n        const formatParams = cause\r\n            ? `, cause: ${cause}`\r\n            : '';\r\n\r\n        pushLog({timestamp, message: msg + formatParams});\r\n\r\n        if (enabled) {\r\n            originalConsoleInfo.call(console,\r\n                ...[text, cause].filter(item => item !== undefined),\r\n            );\r\n        }\r\n    };\r\n\r\n    const error = (text: string, cause?: unknown) => {\r\n        const {timestamp, format} = getDate();\r\n\r\n        const msg = `[${format}] ${text}`;\r\n        const formatParams = cause\r\n            ? `, cause: ${JSON.stringify(cause)}`\r\n            : '';\r\n\r\n        pushLog({timestamp, message: msg + formatParams});\r\n\r\n        if (enabled) {\r\n            originalConsoleError.call(console,\r\n                ...[text, cause].filter(item => item !== undefined),\r\n            );\r\n        }\r\n    };\r\n\r\n    const warn = (text: string, cause?: unknown) => {\r\n        const {timestamp, format} = getDate();\r\n\r\n        const msg = `[${format}] ${text}`;\r\n        const formatParams = cause\r\n            ? `, cause: ${JSON.stringify(cause)}`\r\n            : '';\r\n\r\n        pushLog({timestamp, message: msg + formatParams});\r\n\r\n        if (enabled) {\r\n            originalConsoleWarn.call(console,\r\n                ...[text, cause].filter(item => item !== undefined),\r\n            );\r\n        }\r\n    };\r\n\r\n    const server = (params: { type: string, name?: string, payloadType: number, color: string, item: IMessage }) => {\r\n        const {type, name, payloadType, color, item} = params;\r\n\r\n        const {timestamp, format} = getDate();\r\n\r\n        const msg = `[${format}]: ${type} (${name ?? payloadType}): ${JSON.stringify(item)}`;\r\n\r\n        pushLog({timestamp, message: msg});\r\n\r\n        if (enabled) {\r\n            originalConsoleLog.call(console,\r\n                `%c ${type}: %c [${name ?? payloadType}]`,\r\n                `background: #d2ac7f`,\r\n                `background: ${color}; color: rgb(50, 57, 65)`,\r\n                item,\r\n            );\r\n        }\r\n    };\r\n\r\n    const request = (item: IMessage, messageName?: string) => {\r\n        server({type: 'Req', name: messageName, payloadType: item.payloadType, color: '#daf9d0', item});\r\n    };\r\n\r\n    const response = (item: IMessage, messageName?: string) => {\r\n        server({type: 'Res', name: messageName, payloadType: item.payloadType, color: '#cceaf4', item});\r\n    };\r\n\r\n    const event = (item: IMessage, messageName?: string) => {\r\n        server({type: 'Evt', name: messageName, payloadType: item.payloadType, color: '#d5d3f3', item});\r\n    };\r\n\r\n    return {\r\n        enable,\r\n        disable,\r\n        getLogs,\r\n        info,\r\n        error,\r\n        warn,\r\n        request,\r\n        response,\r\n        event,\r\n    };\r\n};\r\n"],"mappings":"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","names":["src_exports","__export","createLogger","__toCommonJS","zeroPad","x","len","defaultExpirationTime","createLogger","isEnabled","enabled","originalConsoleInfo","originalConsoleLog","originalConsoleError","originalConsoleWarn","logs","pushLog","log","item","text","causes","timestamp","format","getDate","msg","formatParams","enable","disable","getLogs","date","zeroPad","info","cause","error","warn","server","params","type","name","payloadType","color","messageName"]}